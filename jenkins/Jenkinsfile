pipeline {
    agent any

    environment {
        GO_VERSION = '1.24.0'
    }
    
    tools {
         // Depend on Go plugin
        go "${GO_VERSION}" 
    }

    triggers {
        pollSCM('H/2 * * * *')
    }
    
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    }

    stages {
        
        stage('Validate & Generate Code') {
            steps {
                sh'go version'
                sh"go mod tidy"
                sh"sudo apt-get update && sudo apt-get install -y build-essential"
                sh"go install golang.org/x/tools/cmd/goimports@latest"
                sh"""
                   export PATH=$PATH:\$(go env GOPATH)/bin
                   CGO_ENABLED=1 go generate ./... """
            }
        }

        stage('Lint') {
            steps {
                script {
                    sh """
                        echo "Installing golangci-lint..."
                        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b \$(go env GOPATH)/bin v2.1.6
                        export PATH=$PATH:\$(go env GOPATH)/bin
                        golangci-lint run --timeout=30m
                    """
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'go test -cover -race -coverprofile=coverage.out -covermode=atomic ./...'
                    } catch (err) {
                        echo "Tests failed: ${err}"
                        currentBuild.result = 'FAILURE'
                    } finally {
                        if (fileExists('report.xml')) {
                            junit 'report.xml'
                        }
                    }
                }
            }
        }

        // stage('Setup PostgreSQL') {
        //     environment {
        //         PGHOST = 'localhost'
        //         PGPORT = '5432'
        //         PGUSER = 'postgres'
        //         PGPASSWORD = 'postgres'
        //         PGSSLMODE = 'disable'
        //     }
        //     steps {
        //         sh '''
        //             # Install PostgreSQL
        //             sudo apt-get update
        //             sudo apt-get install -y postgresql
                    
        //             # Start PostgreSQL service
        //             sudo systemctl start postgresql
        //             sudo systemctl enable postgresql
                    
        //             # Wait for PostgreSQL to start
        //             sleep 5
                    
        //             # Set up PostgreSQL for testing
        //             sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        //             sudo -u postgres createdb gogs_test
        //             sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE gogs_test TO postgres;"
                    
        //             # Configure authentication - allow md5 authentication for localhost
        //             sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/" /etc/postgresql/*/main/postgresql.conf
                    
        //             # Update pg_hba.conf to allow password authentication
        //             sudo sed -i 's/local   all             all                                     peer/local   all             all                                     md5/' /etc/postgresql/*/main/pg_hba.conf
        //             sudo sed -i 's/host    all             all             127.0.0.1\\/32            scram-sha-256/host    all             all             127.0.0.1\\/32            md5/' /etc/postgresql/*/main/pg_hba.conf
                    
        //             # Restart PostgreSQL to apply configuration changes
        //             sudo systemctl restart postgresql
                    
        //             # Wait for PostgreSQL to be ready
        //             timeout=30
        //             while ! pg_isready -h localhost -U postgres -d gogs_test > /dev/null 2>&1; do
        //                 echo "Waiting for PostgreSQL to be ready..."
        //                 sleep 2
        //                 timeout=$((timeout - 1))
        //                 if [ $timeout -eq 0 ]; then
        //                     echo "PostgreSQL failed to start within expected time"
        //                     exit 1
        //                 fi
        //             done
                    
        //             echo "PostgreSQL is ready!"
                    
        //             # Test connection
        //             PGPASSWORD=postgres psql -h localhost -U postgres -d gogs_test -c "SELECT version();"
        //         '''
        //     }
        // }

        stage('Test Postgres Database') {
            environment {
                PGHOST = 'localhost'
                PGPORT = '5432'
                PGUSER = 'postgres'
                PGPASSWORD = 'postgres'
                PGSSLMODE = 'disable'
            }
            steps {
                sh '''
                    sudo apt-get update
                    sudo apt-get install -y postgresql
                    sudo systemctl start postgresql
                    sudo systemctl enable postgresql
                '''
                sh'go test -shuffle=on -v -race -coverprofile=coverage -covermode=atomic ./internal/database/...' 
            }
        }
        
        stage('Build') {
            steps {
                sh 'go build -v .'
            }
        }
        
        stage('Archive Build') {
            steps {
                script {
                    def buildArtifactsDir = "artifacts/build_${BUILD_NUMBER}"
                    sh """
                    mkdir -p artifacts
                    mkdir -p ${buildArtifactsDir}/log
                    mkdir -p ${buildArtifactsDir}/coverages
                    
                    cp ./gogs ${buildArtifactsDir}/
                    cp -r ./scripts ${buildArtifactsDir}/scripts
                    go tool cover -html=coverage.out -o coverage.html
                    cp ./coverage*.out ${buildArtifactsDir}/coverages/
                    """
                    //publishHTML([reportDir: '.', reportFiles: 'coverage.html', reportName: 'Go Coverage'])
                    archiveArtifacts artifacts: "${buildArtifactsDir}/**", fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Gogs build succeeded!'
        }
        failure {
            echo 'Gogs build failed!'
        }
    }
}